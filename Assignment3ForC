#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

typedef struct Contact
{
char *firstName; 
char *familyName; 
long long phoneNum;
char *address; 
int age; 
} Contact; 

void menu();
void menu5();
int countContacts(Contact **contacts);
Contact *readNewContact();
Contact **appendContact(Contact **contacts, Contact *newContact);
Contact **insertContactAlphabetical(Contact **contacts, Contact *newContact);
Contact **removeContactByIndex(Contact **contacts);
int removeContactByFullName(Contact ***contacts);
void listContacts(Contact **contacts);
void saveContactsToFile(Contact **contacts, char *filename);
void printContactsToFile(Contact **contacts, char *filename);
Contact **loadContactsFromFile(char *filename);
Contact **mergeContactsFromFile(Contact **contacts, char *filename);
Contact **appendContactsFromFile(Contact **contacts, char *filename);
Contact *editContact(Contact **contacts, int index);
Contact *readContactFile(FILE *file)



int main()
{
    menu();
}

void menu()
{
    int choice = 0;
	Contact **contacts = NULL;
	
	while(1)
	{
	    printf("Address Book Menu \n\
1. Append Contact \n\
2. Insert Contact in Alphabetical Order \n\
3. Remove Contact by Index \n\
4. Remove Contact by Full Name \n\
5. Find and Edit Contact \n\
6. List Contacts \n\
7. Print Contacts to File with the format of an input file \n\
8. Print Contacts to File (Human Readable) \n\
9. Load Contacts from File Replacing Existing Contacts \n\
10. Append Contacts from File \n\
11. Merge Contacts from File \n\
12. Exit \n\
Choose an option: ");
	    
		scanf("%d", &choice);
		if(choice >= 1 && choice <= 12)
		{
			if(1 == choice) /*Append Contact*/
			{
				printf("Adding a constact interactively: \n");

				Contact *newContact = readNewContact();
                contacts = appendContact(contacts, newContact);
                printf("\n");
			}

			else if(2 == choice) /*Insert Contact in Alphabetical Order*/
			{
				continue;
			}

			else if(3 == choice) /*Remove Contact by Index*/
			{
				continue;
			}

			else if(4 == choice) /*Remove Contact by Full Name*/
			{
				continue;
			}

			else if(5 == choice) /*Find and Edit Contact*/
			{
				continue;
			}

			else if(6 == choice) /*List Contacts*/
			{
				continue;
			}

			else if(7 == choice) /*Print Contacts to File with the format of an input file*/
			{
				continue;
			}

			else if(8 == choice) /*Print Contacts to File (Human Readable)*/
			{
				continue;
			}

			else if(9 == choice) /*Load Contacts from File Replacing Existing Contacts*/
			{
				continue;
			}

			else if(10 == choice) /*Append Contacts from File*/
			{
				continue;
			}
			
			else if(11 == choice) /*Merge Contacts from File*/
			{
				continue;
			}

			else if(12 == choice) /*Exit*/
			{
				/*make sure to free all memory before exiting*/

				printf("Exiting program. Goodbye!");
				
				exit(0);
			}
		}
		else
		{
			printf("Error: option not available. Try again: ");
		}
	}
}


void menu5()
{
	int contactIndex = 0;
	int choice = 0;

	printf("Select Contact index: ");
	scanf("%d", &contactIndex);

	printf("1. Edit First Name \n\
	2. Edit Last Name \n\
	3. Edit Address \n\
	4. Edit Phone Number \n\
	5. Edit Age \n\
	6. Cancel \n\
	");

	while(1)
	{
		scanf("%d", &choice);
		if(0 <= choice || 7 >= choice)
		{
			if(1 == choice) /*Edit First Name*/
			{
				continue;
			}

			else if(2 == choice) /*Edit Last Name*/
			{
				continue;
			}
			else if(3 == choice) /*Edit Address*/
			{
				continue;
			}

			else if(4 == choice) /*Edit Phone Number*/
			{
				continue;
			}
			else if(5 == choice) /*Edit Age*/
			{
				continue;
			}

			else if (6 == choice) /*Cancel*/
			{
				return 0;
			}
		}
		else
		{
			printf("Error: option not available. Try again: ");
		}
	}
}

int countContacts(Contact **contacts)
{
	int count = 0;
	
	if (contacts == NULL) 
	{
	return 0;
	}

  while (contacts[count] != NULL) 
	{
  	count++;
  }
  return count;
}

Contact *readNewContact() 
{
    int ageTemp = 0;
    int ageTries = 0;
    long long phoneTemp = 0;
    int phoneTries = 0;

    Contact *newContact = (Contact *)malloc(sizeof(Contact));
    if (!newContact) 
    {
        printf("Error: Memory allocation failed for Contact in readNewContact \n");
        return NULL;
    }

    newContact->firstName = (char*)malloc(100 * sizeof(char));
    if(!newContact->firstName) 
    {
        printf("Error: unable to allocate memory for the first name string\n");
        free(newContact);
        return NULL;
    }
    
    newContact->familyName = (char*)malloc(100 * sizeof(char));
    if(!newContact->firstName) 
    {
        printf("Error: unable to allocate memory for the family name string\n");
        free(newContact->firstName);
        free(newContact);
        return NULL;
    }
    
    newContact->address = (char*)malloc(200 * sizeof(char));
    if(!newContact->firstName) 
    {
        printf("Error: unable to allocate memory for the address string\n");
        free(newContact->familyName);
        free(newContact->firstName);
        free(newContact);
        return NULL;
    }

    /*Read first name*/
    printf("Enter the first name: ");
    scanf("%99s", newContact->firstName);
    while (getchar() != '\n');

    /*Read family name*/
    printf("Enter the family name: ");
    scanf("%99s", newContact->familyName);
    while (getchar() != '\n');

    /*Read address*/
    printf("Enter the address: ");
    scanf("%199[^\n]", newContact->address);
    while (getchar() != '\n');

    /*Read phone number*/
    while(1) 
    {
        printf("Enter 10-digit phone number that must not start with 0: ");
        
        if (scanf("%lld", &phoneTemp) != 1) 
        {
            printf("Error: Invalid phone number. Try again: ");
            while(getchar() != '\n');
            phoneTries++;
        } 
        
        /*Phone number re-tries*/
        else 
        {
            if(phoneTemp >= 1000000000LL && phoneTemp <= 9999999999LL) 
            {
                newContact->phoneNum = phoneTemp;
                break;
            } 
            
            else 
            {
                printf("Error: Invalid phone number. Try again: ");
                phoneTries++;
            }
        }

        if (phoneTries >= 5) {
            printf("Error: Could not read a valid phone number\n");
            newContact->phoneNum = 0;
            break;
        }
    }

    /*Read age*/
    while(1) 
    {
        printf("Enter the age: ");
        
        if (scanf("%d", &ageTemp) != 1) 
        {
            printf("Error: Invalid age. Try again: ");
            while(getchar() != '\n');
            ageTries++;
        } 
        
        /*Age re-tries*/
        else 
        {
            if(ageTemp >= 0 && ageTemp <= 151) 
            {
                newContact->age = ageTemp;
                break;
            } 
            
            else 
            {
                printf("Error: Invalid age. Try again: ");
                ageTries++;
            }
        }

        if(ageTries >= 5) 
        {
            printf("Error: Could not read a valid age\n");
            newContact->age = 0;
            break;
        }
    }
    return newContact;
}

Contact **appendContact(Contact **contacts, Contact *newContact)
{
	if(newContact == NULL)
	{
		return comtacts;
	}
	
	size_t count = 0;
	while(contacts && contacts[count] != NULL) 
	{
		count++;
	}

	Contact **newContacts = (Contact **)realloc(contacts, (count + 2) * sizeof(Contact *));
	if(newContacts == NULL)
	{
		printf("Error: Memory reallocation error in appendContact\n");
		exit(EXIT_FAILURE);
	}

	newContacts[count] = newContact;
  newContacts[count + 1] = NULL;
  printf("Contact appended successfully by appendContact\n");
  return newContacts;
}

Contact **insertContactAlphabetical(Contact **contacts, Contact *newContact)
{
	
}

Contact **removeContactByIndex(Contact **contacts)
{
	
}

int removeContactByFullName(Contact ***contacts)
{
	
}

void listContacts(Contact **contacts)
{
	
}

void saveContactsToFile(Contact **contacts, char *filename)
{
	
}

void printContactsToFile(Contact **contacts, char *filename)
{
	
}

Contact **loadContactsFromFile(char *filename)
{
	
}

Contact **mergeContactsFromFile(Contact **contacts, char *filename)
{
	
}

Contact **appendContactsFromFile(Contact **contacts, char *filename)
{
	
}

Contact *editContact(Contact **contacts, int index)
{
	
}

Contact *readContactFile(FILE *file)
{
	readline
	fscanf("%s%s%s%lld%d", &currentFirst->newcontact, &currentFamily->n
}
















