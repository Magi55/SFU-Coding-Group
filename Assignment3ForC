#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

typedef struct Contact
{
char *firstName; 
char *familyName; 
long long phoneNum;
char *address; 
int age; 
} Contact; 

void menu5();
int countContacts(Contact **contacts);
Contact *readNewContact();
Contact **appendContact(Contact **contacts, Contact *newContact);
Contact **insertContactAlphabetical(Contact **contacts, Contact *newContact);
Contact **removeContactByIndex(Contact **contacts);
int removeContactByFullName(Contact ***contacts);
void listContacts(Contact **contacts);
void saveContactsToFile(Contact **contacts, char *filename);
void printContactsToFile(Contact **contacts, char *filename);
Contact **loadContactsFromFile(char *filename);
Contact **mergeContactsFromFile(Contact **contacts, char *filename);
Contact **appendContactsFromFile(Contact **contacts, char *filename);
Contact *editContact(Contact **contacts, int index);



int main()
{
	int choice = 0;

	printf("Address Book Menu \n\
		1. Append Contact \n\
		2. Insert Contact in Alphabetical Order \n\
		3. Remove Contact by Index \n\
		4. Remove Contact by Full Name \n\
		5. Find and Edit Contact \n\
		6. List Contacts \n\
		7. Print Contacts to File with the format of an input file \n\
		8. Print Contacts to File (Human Readable) \n\
		9. Load Contacts from File Replacing Existing Contacts \n\
		10. Append Contacts from File \n\
		11. Merge Contacts from File \n\
		12. Exit \n\
		Choose an option: ");
	
	while(1)
	{
		scanf("%d", &choice);
		if(0 <= choice || 13 >= choice)
		{
			if(1 == choice) /*Append Contact*/
			{
				printf("Adding a constact interactively: ");

				appendContact();
			}

			else if(2 == choice) /*Insert Contact in Alphabetical Order*/
			{
				insertContactAlphabetical(Contact **contacts, Contact *newContact);
			}

			else if(3 == choice) /*Remove Contact by Index*/
			{
				removeContactByIndex(Contact **contacts);
			}

			else if(4 == choice) /*Remove Contact by Full Name*/
			{
				removeContactByFullName(Contact ***contacts);
			}

			else if(5 == choice) /*Find and Edit Contact*/
			{
				menu5();
			}

			else if(6 == choice) /*List Contacts*/
			{
				listContacts(Contact **contacts);
			}

			else if(7 == choice) /*Print Contacts to File with the format of an input file*/
			{
				continue;
			}

			else if(8 == choice) /*Print Contacts to File (Human Readable)*/
			{
				continue;
			}

			else if(9 == choice) /*Load Contacts from File Replacing Existing Contacts*/
			{
				continue;
			}

			else if(10 == choice) /*Append Contacts from File*/
			{
				appendContactsFromFile(Contact **contacts, char *filename);
			}
			
			else if(11 == choice) /*Merge Contacts from File*/
			{
				mergeContactsFromFile(Contact **contacts, char *filename);
			}

			else if(12 == choice) /*Exit*/
			{
				/*make sure to free all memory before exiting*/

				printf("Exiting program. Goodbye!");
				
				return 0;
			}
		}
		else
		{
			printf("Error: option not available. Try again: ");
		}
	}
}

void menu5()
{
	int contactIndex = 0;
	int choice = 0;

	printf("Select Contact index: ");
	scanf("%d", &contactIndex);

	printf("1. Edit First Name \n\
	2. Edit Last Name \n\
	3. Edit Address \n\
	4. Edit Phone Number \n\
	5. Edit Age \n\
	6. Cancel \n\
	");

	while(1)
	{
		scanf("%d", &choice);
		if(0 <= choice || 7 >= choice)
		{
			if(1 == choice) /*Edit First Name*/
			{
				continue;
			}

			else if(2 == choice) /*Edit Last Name*/
			{
				continue;
			}
			else if(3 == choice) /*Edit Address*/
			{
				continue;
			}

			else if(4 == choice) /*Edit Phone Number*/
			{
				continue;
			}
			else if(5 == choice) /*Edit Age*/
			{
				continue;
			}

			else if (6 == choice) /*Cancel*/
			{
				return 0;
			}
		}
		else
		{
			printf("Error: option not available. Try again: ");
		}
	}
}

int countContacts(Contact **contacts)
{
	int count = 0;
	
	for(int i = 0; i < sizeof(contacts); i++)
	{
		if(NULL != contacts[i])
		{
			count++;
		}
	}
	
	return count;
}

Contact *readNewContact() 
{
	Contact *newContact = (Contact *)malloc(sizeof(Contact));

	newContact->firstname = (char*)malloc(100 * sizeof(char));
	newContact->familyName = (char*)malloc(100 * sizeof(char));
	newContact->address = (char*)malloc(200 * sizeof(char));

	printf("Enter first name: ");
	scanf("%s", newContact->firstName);

	printf("Enter family name: ");
	scanf("%s", newContact->familyName);

	printf("Enter address: ");
	scanf("%s", newContact->address);

	while
	printf("Enter 10-digit phone number that must not start with 0: ");
	scanf("%lld", &newContact->phoneNum);

	printf("Enter age: ");
	scanf("%d", &newContact->age);

	return newContact;
	
}

Contact **appendContact(Contact **contacts, Contact *newContact)
{
	if(newContact == NULL)
	{
		return comtacts;
	}
	
	size_t count = 0;
	while(contacts && contacts[count] != NULL) 
	{
		count++;
	}

	Contact **newContacts = (Contact **)realloc(contacts, (count + 2) * sizeof(Contact *));
	if(newContacts == NULL)
	{
		printf("Error: Memory reallocation error in appendContact\n");
		exit(EXIT_FAILURE);
	}

	newContacts[count] = newContact;
  newContacts[count + 1] = NULL;
  printf("Contact appended successfully by appendContact\n");
  return newContacts;
}

Contact **insertContactAlphabetical(Contact **contacts, Contact *newContact)
{
	
}

Contact **removeContactByIndex(Contact **contacts)
{
	
}

int removeContactByFullName(Contact ***contacts)
{
	
}

void listContacts(Contact **contacts)
{
	
}

void saveContactsToFile(Contact **contacts, char *filename)
{
	
}

void printContactsToFile(Contact **contacts, char *filename)
{
	
}

Contact **loadContactsFromFile(char *filename)
{
	
}

Contact **mergeContactsFromFile(Contact **contacts, char *filename)
{
	
}

Contact **appendContactsFromFile(Contact **contacts, char *filename)
{
	
}

Contact *editContact(Contact **contacts, int index)
{
	
}

















