# Assignment 5

#
# Full Name:Hiroshi Wong, Kanamu Kobayashi
#  SFU ID #:301625447
# SFU Email:hew5@sfu.ca
#

import random, time
from multiprocessing.managers import Value

#===========#

dice_face = {
    1: [" ----- ",
        "|     |",
        "|  ●  |",
        "|     |",
        " ----- "],
    2: [" ----- ",
        "| ●   |",
        "|     |",
        "|   ● |",
        " ----- "],
    3: [" ----- ",
        "| ●   |",
        "|  ●  |",
        "|   ● |",
        " ----- "],
    4: [" ----- ",
        "| ● ● |",
        "|     |",
        "| ● ● |",
        " ----- "],
    5: [" ----- ",
        "| ● ● |",
        "|  ●  |",
        "| ● ● |",
        " ----- "],
    6: [" ----- ",
        "| ● ● |",
        "| ● ● |",
        "| ● ● |",
        " ----- "]
}

points = {1: 100, 2: 2, 3: 3, 4: 4, 5: 5, 6: 60}
special_scores = {
    (4, 5, 6): 1000,
    (6, 6, 6): 900,
    (5, 5, 5): 800,
    (4, 4, 4): 700,
    (3, 3, 3): 600,
    (2, 2, 2): 500,
    (1, 1, 1): 400,
    (1, 2, 3): 300
}

scores = {"user":0, "bot1":0, "bot2":0, "bot3":0}
risk = {"user": 0, "bot1": 0, "bot2": 0, "bot3": 0}

def roll_dice(user):
    scores[user] = 0
    risk[user] = 0

    rolls = [random.randint(1, 6) for j in range(3)]

    for row in range(5):
        print("  ".join(dice_face[i][row] for i in rolls))

    sorted_rolls = tuple(sorted(rolls))
    if sorted_rolls in special_scores:
        scores[user] += special_scores[sorted_rolls]

        if sorted_rolls == (4, 5, 6):
            print("PoCo!")
            risk[user] += 4
        elif sorted_rolls == (1, 2, 3):
            print("LoCo!")
            risk[user] += 2
        else:
            print("Three-of-a-kind!")
            risk[user] += 3

    else:
        scores[user] += sum(points[die] for die in rolls)
        risk[user] += 1

    print(f'Rolled {rolls}')
    print(f'Total Points: {scores[user]}')#temporary, setting up winning and losing
#===========#
rolls_left = 0

def three_tries(tries, user):
    global rolls_left
    attempts = tries
    while attempts > 0:
        roll_dice(user)
        attempts -= 1

        if attempts == 0:
            print(f"State automatically saved after {tries-attempts} attempts")
            rolls_left = tries - attempts
            break

        print(f'Attempts left: {attempts}')
        if user == "user":
            while True:
                retry = input('Would you like to try again?: (Yes/No)').strip().lower()

                if retry == "yes":
                    print("Re-rolling...")
                    time.sleep(3)
                    break

                elif retry == "no":
                    print(f"State automatically saved after {tries - attempts} attempts")
                    print("Ending Turn")
                    input("\nPress [Enter] to continue\n")
                    rolls_left = tries - attempts
                    return

                else:
                    print("Invalid input. Please type 'yes' or 'no'.")
        else:
            if scores[user] >= 100:
                print(f"State automatically saved after {tries - attempts} attempts")
                print("Ending Turn")
                input("\nPress [Enter] to continue\n")
                rolls_left = tries - attempts
                break
            else:
                print("Re-rolling...")
                time.sleep(3)
#===========#

def ai_turn(tries, bot_name):
    print(f"\n{bot_name}'s turn begins!")
    three_tries(tries, bot_name)

#===========#

ran_player1 = {1:"Ajani", 2:"Bruvac", 3:"Christ", 4:"Dean", 5:"Elspeth", 6:"Frank", 7:"Gisa", 8:"Herman", 9:"Isaac"}
ran_player2 = {1:"Jace", 2:"Karn", 3:"Lindy", 4:"Minsc", 5:"Nissa", 6:"Oscar", 7:"Peter", 8:"Queen", 9:"Rachel"}
ran_player3 = {1:"Sorin", 2:"Thalia", 3:"Urza", 4:"Virgil", 5:"Walter", 6:"Xavier", 7:"Yarok", 8:"Zuko"}

player = {0:"user", 1:"player1", 2:"player2", 3:"player3"}

def players():
    player[1] = random.choice(list(ran_player1.values()))
    scores[1] = player[1]
    player[2] = random.choice(list(ran_player2.values()))
    scores[2] = player[2]
    player[3] = random.choice(list(ran_player3.values()))
    scores[3] = player[3]

#===========#
# function to be used in the game function

def report(rounds):
    round_text = (f"Round {rounds}")
    border_len = len(round_text) + 4

    print("+" + "-" * (border_len - 2) + "+")
    print(f'| {round_text} |')
    print("+" + "-" * (border_len - 2) + "+")

    time.sleep(2)

    print(f"""
    {player[0]}: {tokens["user"]}
    {player[1]}: {tokens["bot1"]}
    {player[2]}: {tokens["bot2"]}
    {player[3]}: {tokens["bot3"]}
    """)
    input("\nPress [Enter] to continue\n")

#===========#

def winner():
    winner = max(scores)
    loser = min(scores)
    print(f'the winner of this round is {winner}, and the loser of this round is {loser}')
    print(f'Changing scores...')


#===========#

tokens = {"user":0, "bot1":0, "bot2":0, "bot3":0}

def chips():
    while True:
        try:
            chip_num = int(input("How many chips would you like to start?"))
            break
        except ValueError:
            print(f'Please give a non-decimal number')

    tokens["user"] = chip_num
    tokens["bot1"] = chip_num
    tokens["bot2"] = chip_num
    tokens["bot3"] = chip_num

#===========#

def rules():
    rule = input('Would you like to read the rules?: (Yes/No)').strip().lower()

    if rule == "yes":
        print("""
        PoCoLoCo! is a dice-rolling game played with chips. 
        Players take turns repeatedly rolling three dice, 
        and the first player to lose all their chips is the 
        winner. PocoLoco is played in rounds.
        """)

        time.sleep(3)

        print("""
        In each round, players take turns rolling three dice 
        and try to get the highest score possible. The order 
        of which player goes first, second, third and fourth
        are randomized.
        """)

        time.sleep(3)

        print("""
        The first player has up to three chances to roll the 
        score they want, however, you can choose to stop early,
        and the next players can only roll as many times as 
        previous player or less. 
        """)

        time.sleep(3)

        print("""
        The scores of the dice are as follows:
        1 = 100 points
        2 = 2 points
        3 = 3 points
        4 = 4 points
        5 = 5 points
        6 = 60 points
        """)

        time.sleep(3)

        print("""
        There is also special scores that are above normal scores.
        These scores, which rank from highest to lowest, are as
        follows: 
        1st: PoCo! (4, 5, 6)
        2nd: (6, 6, 6)
        3rd: (5, 5, 5)
        4th: (4, 4, 4)
        5th: (3, 3, 3)
        6th: (2, 2, 2)
        7th: (1, 1, 1)
        8th: LoCo! (1, 2, 3)
        """)

        time.sleep(3)

        print("""        
        In the case of a tie, a tiebreaker will occur, in which a
        game of rock-paper-scissors will be played, where the winner 
        of that game will win the round.
        """)

        print("""        
        The loser of the round will receive chips equal to the scores
        as follows:
        PoCo!: 4 chips
        3-of-a-kind: 3 chips
        LoCo!: 2 chips
        Normal Score: 1 chip
        """)

        time.sleep(3)

        print("""
        Rounds will continue until a player has no chips left, in which
        the game will end and that player will win.
        """)

    elif rule == "no":
        print(f"Understood!")

    else:
        print("Invalid input. Please type 'yes' or 'no'.")
        rules()

#===========#

def tiebreaker():
    possible_actions = ["rock", "paper", "scissors"]

    user_action = input("Enter a choice (rock, paper, scissors): ").lower()
    computer_action = random.choice(possible_actions)

    print(f"\nYou chose {user_action}, computer chose {computer_action}.\n")

    if user_action == computer_action:
        print(f"Both players selected {user_action}. It's a tie!")
        tiebreaker()
    elif user_action == "rock":
        if computer_action == "scissors":
            print("Rock smashes scissors! You win!")
        else:
            print("Paper covers rock! You lose.")

    elif user_action == "paper":
        if computer_action == "rock":
            print("Paper covers rock! You win!")
        else:
            print("Scissors cuts paper! You lose.")

    elif user_action == "scissors":
        if computer_action == "paper":
            print("Scissors cuts paper! You win!")
        else:
            print("Rock smashes scissors! You lose.")

#===========#

def game():
    name = ''
    while name == '':
        name = input("What is your name?: ")
    player[0] = name
    print(f'Hello {name}, Let\'s play a game!')
    print(f'Hello! and welcome to...')
    time.sleep(2)
    print("""
    +------------+
    | PoCo LoCo! |
    +------------+
    """)
    input("\nPress [Enter] to continue\n")
    print(f'Our players are...')
    time.sleep(2)
    players()
    print(f'{player[1]}, {player[2]}, {player[3]}, and {name}!')
    print(f'Let\'s start the game!')
    rules()
    chips()
    roundnum = 0
    while True:
        if tokens != 0:
            random.shuffle(player)
            player["user"] = name
            roundnum += 1
            report(roundnum)

            for i in range(4):
                current_player = player[i]
                print(f'It is {current_player}\' turn')
                time.sleep(2)

                if current_player == name:
                    three_tries(rolls_left if i > 0 else 3, "user")
                else:
                    ai_turn(rolls_left if i > 0 else 3, current_player)


        elif tokens["user"] <= 0:
            print(f'Game Over!')
            time.sleep(1)
            print(f'You Win!')
            time.sleep(1)
            print(f'''
            Final Score:
            {player[0]}: {tokens["user"]}
            {player[1]}: {tokens["bot1"]}
            {player[2]}: {tokens["bot2"]}
            {player[3]}: {tokens["bot3"]}
            ''')
            time.sleep(1)
            print(f'Good Game!')
#===========#

game()
